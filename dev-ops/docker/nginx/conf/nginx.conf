# 启动进程数,不是CPU数,最好为CPU核心数 * CPU数,通常设置成和 CPU 的数量相等
worker_processes 4;

#进程最大可打开文件数
worker_rlimit_nofile 260000;

#worker_cpu_affinity: 进程绑定的CPU核心
#4核心
worker_cpu_affinity 01 10 01 10;

#8核心
#worker_cpu_affinity 00000001 00000010 00000100 00001000 00010000 00100000 01000000 10000000;

events {
  # epoll 是多路复用 IO(I/O Multiplexing) 中的一种方式
  # 但是仅用于 linux2.6 以上内核,可以大大提高 nginx 的性能
  use epoll;

  # 单个后台 worker process 进程的最大并发链接数
  worker_connections  65000;

}

http {

  # 设定 mime 类型,类型由 mime.type 文件定义
  include       mime.types;
  default_type  application/octet-stream;

  # sendfile 指令指定 nginx 是否调用 sendfile 函数（zero copy 方式）来输出文件，对于普通应用，
  # 必须设为 on，如果用来进行下载等应用磁盘 IO 重负载应用，可设置为 off，以平衡磁盘与网络 I/O 处理速度，降低系统的 uptime.
  sendfile        on;

  # 连接超时时间
  keepalive_timeout  65;

  # 设定请求缓冲
  client_header_buffer_size 2k;

  #日志格式格式化
  log_format main '{"timestamp":"$time_iso8601",'
                        '"source_ip":"$server_addr",'
                        '"client_ip":"$remote_addr",'
                        '"request_method":"$request_method",'
                        '"scheme":"$scheme",'
                        '"domain":"$server_name",'
                        '"request":"$request_uri",'
                        '"upstreamaddr":"$upstream_addr",'
                        '"responsetime":$request_time,'
                        '"upstreamtime":"$upstream_response_time",'
                        '"status": $status'
                        #'"http_user_agent":"$http_user_agent"
                        '}';

  #日志记录
  access_log /var/log/nginx/access.log main;


# 默认的 SSL 服务器块，处理未匹配的域名
server {
    listen 443 ssl default_server;
    listen [::]:443 ssl default_server;
    server_name _;  # _ 表示匹配所有未定义的域名

    # 默认的 SSL 证书（可以是任意证书）
    ssl_certificate      /etc/nginx/cert/x.x.crt;
    ssl_certificate_key  /etc/nginx/cert/x.x.key;

    # 返回 403 Forbidden
    return 403;
}


#静态资源
server {

    listen 443 ssl;
    server_name  www.xx.com;

    #开启压缩
    gzip on;
    gzip_types text/plain text/css application/javascript image/*;
    gzip_min_length 1024;
    gzip_comp_level 2;
    gzip_proxied any;
    gzip_vary on;
    gzip_disable "MSIE [1-6]\.";


    #证书文件(注意ssl_certificate)
    ssl_certificate      /etc/nginx/cert/xx.crt;
    ssl_certificate_key  /etc/nginx/cert/xx.key;
    ssl_session_timeout 5m;
    ssl_ciphers ECDHE-RSA-AES128-GCM-SHA256:ECDHE:ECDH:AES:HIGH:!NULL:!aNULL:!MD5:!ADH:!RC4;
    ssl_protocols TLSv1 TLSv1.1 TLSv1.2;
    ssl_prefer_server_ciphers on;

    #ssl验证,自动续期
    location /.well-known/acme-challenge/ {
       root /etc/nginx/cert;
       allow all;
    }


    location ~ ^/(dashboard|lanpage) {

           #缓存静态资源
           location ~* \.(jpg|jpeg|png|gif|ico|css|js)$ {

                #缓存时间
                expires 2m;

                #缓存到任何设备
                add_header Cache-Control "public";

                #开启静态压缩
                gzip_static on;
            }

            #缓存字体等大文件
            location ~* \.(ttf|otf|eot|woff|woff2)$ {
                expires 200d ;
                add_header Cache-Control "public";
                gzip_static on;
            }

            #前端项目挂载到容器内的路径
            root   /usr/share/nginx/app/fundplate/dashboard;

            # 指定欢迎页面，按从左到右顺序查找
            index  index.html index.htm;
    }

}


#服务API
server {

    listen 443 ssl;
    server_name  api.xx.com;

    gzip on;
    gzip_types text/plain text/css application/javascript image/*;
    gzip_min_length 1024;
    gzip_comp_level 2;
    gzip_proxied any;
    gzip_vary on;
    gzip_disable "MSIE [1-6]\.";


    #证书文件(注意ssl_certificate)
    ssl_certificate      /etc/nginx/cert/x.x.crt;
    ssl_certificate_key  /etc/nginx/cert/x.x.key;
    ssl_session_timeout 5m;
    ssl_ciphers ECDHE-RSA-AES128-GCM-SHA256:ECDHE:ECDH:AES:HIGH:!NULL:!aNULL:!MD5:!ADH:!RC4;
    ssl_protocols TLSv1 TLSv1.1 TLSv1.2;
    ssl_prefer_server_ciphers on;

   #websockt协议: wss为域名后缀访问路径
   location /wss {
       proxy_pass http://0.0.0.0:8620;
       proxy_http_version 1.1;
       proxy_read_timeout 60s;
       proxy_set_header Upgrade $http_upgrade;
       proxy_set_header Connection "upgrade";
   }

    location / {

    #优化预检请求
    if ($request_method = 'OPTIONS') {

      # 允许跨域的请求，可以自定义变量$http_origin，*表示所有
      add_header 'Access-Control-Allow-Origin' *;

      # 允许携带cookie请求
      add_header 'Access-Control-Allow-Credentials' 'true';

      # 允许请求时携带的头部信息，*表示所有
      add_header 'Access-Control-Allow-Headers' *;

      # 允许跨域请求的方法：GET,POST,OPTIONS,PUT
      add_header 'Access-Control-Allow-Methods' 'GET,POST,OPTIONS,PUT';

      add_header 'Access-Control-Max-Age' 1728000;
      add_header 'Content-Type' 'text/plain; charset=utf-8';
      add_header 'Content-Length' 0;
      return 204;
    }


      proxy_set_header X-Real-IP  $remote_addr;
      proxy_set_header Host $host;
      proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
      proxy_set_header X-Forwarded-Proto http;
      proxy_pass http://111.111.111.111:8615;
    }


}


}


